#!/usr/bin/env python
import os,sys
import boto
from boto import ec2

def get_region(obj):
  for r in obj.regions():
    if r.name == os.getenv('EC2_REGION'):
      return r


def priv_pub(instance):
  if options.public:
    if instance.ip_address:
      print(instance.ip_address)
  else:
    print(instance.private_ip_address)


def main():
  ec2conn = boto.connect_ec2(region=get_region(ec2))

  for res in ec2conn.get_all_instances():
    for i in res.instances:
      if options.ip_all:
        priv_pub(i)
      elif options.stackname:
        if i.tags.has_key('aws:cloudformation:stack-name'):
          if i.tags['aws:cloudformation:stack-name'] == stackname and i.state == 'running':
            priv_pub(i)
        else:
          no_tag = str(i) + ' has no aws:cloudformation:stack-name tag\n'
          sys.stderr.write(no_tag)


if __name__ == "__main__":
  from optparse import OptionParser as OP

  usage = "usage: "+os.path.basename(sys.argv[0])+" [options]"
  parser = OP(usage)
  parser.add_option('-s', '--stackname', dest="stackname", action="store")
  parser.add_option('-p', '--public', dest="public", action="store_true",
      help='show public IPs')
  parser.add_option('-a', '--all', dest="ip_all", action="store_true",
      help='show all IPs for all instances')
  (options, args) = parser.parse_args()

  if len(sys.argv) < 3:
    print(usage)
    sys.exit(11)

  if options.ip_all:
    ips = options.ip_all
  if options.stackname:
    stackname = options.stackname

  main()
  sys.exit(0)
